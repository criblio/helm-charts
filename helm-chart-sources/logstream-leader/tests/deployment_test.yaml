suite: Deployment
templates:
  - deployment.yaml
tests:
  - it: Should have health checks by default
    asserts:
      - exists:
          path: spec.template.spec.containers[0].readinessProbe
      - exists:
          path: spec.template.spec.containers[0].livenessProbe

  - it: Should disable health checks
    set:
      config.probes: false
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].readinessProbe
      - notExists:
          path: spec.template.spec.containers[0].livenessProbe

  - it: Should customize health checks
    set:
      config:
        readinessProbe:
          httpGet:
            path: /isnt/a/real/endpoint
            port: 420
            scheme: HTTPS
          initialDelaySeconds: 5
          failureThreshold: 1
        livenessProbe:
          httpGet: null
          initialDelaySeconds: null
          failureThreshold: null
          foo: bar
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe
          value:
            httpGet:
              path: /isnt/a/real/endpoint
              port: 420
              scheme: HTTPS
            initialDelaySeconds: 5
            failureThreshold: 1
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            foo: bar

  - it: Should define TCP as the default protocol for a port
    set:
      service:
        ports:
          - name: foo
            port: 420
    asserts:
      - equal:
          path: spec.template.spec.containers[0].ports
          value:
            - name: foo
              containerPort: 420
              protocol: TCP

  - it: Should define UDP as the protocol for a port
    set:
      service:
        ports:
          - name: foo
            port: 420
            protocol: UDP
    asserts:
      - equal:
          path: spec.template.spec.containers[0].ports
          value:
            - name: foo
              containerPort: 420
              protocol: UDP

  - it: Should set envValueFrom
    set:
      envValueFrom:
        # works with "value"
        - name: ENV1
          value: test
        # works with "valueFrom" too
        - name: ENV2
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
    asserts:
      - exists:
          path: spec.template.spec.containers[0].env
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ENV1
            value: test
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ENV2
            valueFrom:
              fieldRef:
                fieldPath: metadata.name

  - it: Appends -wolfi suffix when wolfiImage is true
    set:
      criblImage:
        repository: foo/bar
        tag: 42.0.0
        wolfiImage: true
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: foo/bar:42.0.0-wolfi

  - it: Does not append -wolfi suffix when wolfiImage is false
    set:
      criblImage:
        repository: foo/bar
        tag: 42.0.0
        wolfiImage: false
    asserts:
      - equal:
          path: spec.template.spec.containers[0].image
          value: foo/bar:42.0.0