{{- if not .Values.config.useExistingSecret }}
apiVersion: v1
kind: Secret
type: Opaque
metadata: 
 name: logstream-config-{{ include "logstream-workergroup.fullname" . }}
stringData:
  {{- $proto := "tcp" }}
  {{- $group := "" }}
  {{- $tlsopts := "" }}
  {{- if .Values.config.tlsLeader.enable }}
    {{- $proto = "tls" -}}
    {{- if .Values.config.tlsLeader.privKeyPath }}
      {{- $tlsopts = printf "%s&tls.privKeyPath=%s" $tlsopts .Values.config.tlsLeader.privKeyPath }}
    {{- end }}
    {{- if .Values.config.tlsLeader.passphrase }}
      {{- $tlsopts = print $tlsopts "&tls.passphrase=" .Values.config.tlsLeader.passphrase }}
    {{- end }}
    {{- if .Values.config.tlsLeader.capath }}
      {{- $tlsopts = print $tlsopts "&tls.caPath=" .Values.config.tlsLeader.capath }}
    {{- end }}
    {{- if .Values.config.tlsLeader.certpath }}
      {{- $tlsopts = printf "%s&tls.certPath=%s" $tlsopts .Values.config.tlsLeader.certpath }}
    {{- end }}
    {{- if .Values.config.tlsLeader.rejectUnauthorized }}
      {{- $tlsopts = printf "%s&tls.rejectUnauthorized=%s" $tlsopts .Values.config.tlsLeader.rejectUnauthorized }}
    {{- end }}
    {{- if .Values.config.tlsLeader.requestCert }}
      {{- $tlsopts = printf "%s&tls.requestCert=%s" $tlsopts .Values.config.tlsLeader.requestCert }}
    {{- end }}
    {{- if .Values.config.tlsLeader.commonNameRegex }}
      {{- $tlsopts = printf "%s&tls.commonNameRegex=%s" $tlsopts .Values.config.tlsLeader.commonNameRegex }}
    {{- end }}
  {{- end }}
  {{- if .Values.config.tag }}
    {{- $group = .Values.config.tag }}
  {{- else if .Values.config.group }}
    {{- $group = .Values.config.group }}
  {{- end }}
  {{- $tagopts := "" }}
  {{- range .Values.config.tags }}
    {{- $tagopts = printf "%s&tag=%s" $tagopts . }}
  {{- end }}
  url-master: "{{ $proto }}://{{ .Values.config.token }}@{{ .Values.config.host }}:{{ .Values.config.port }}?group={{ $group }}&tag={{ $group }}{{ $tlsopts | replace " " "+"}}{{ $tagopts | replace " " "+" }}"
{{- end }}
